{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "57b88be2-c4e0-4aac-8cc7-0786d63033e3",
   "metadata": {},
   "source": [
    "# QUESTION 1:Discuss the scenarios where multithreading is preferable to multiprocessing and scenarios where multiprocessing is a better choice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "117c4d96-e414-46d3-aca4-5994be7edad4",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "# Multithreading is particularly well-suited for I/O-bound tasks, which are tasks that involve significant time waiting for input/output operations to complete. Examples include:\n",
    "\n",
    "# Web Scraping:>>>>> Threads can handle multiple requests at once when gathering data from various web pages.\n",
    "\n",
    "# File I/O Operations:>>>> Especially with large datasets, threads can efficiently manage reading from or writing to files.\n",
    "\n",
    "# Network Applications:>>>>> In server applications, such as chat servers, threads can manage multiple client connections simultaneously.\n",
    "\n",
    "# GUI Applications:>>>>>>> Threads help keep the user interface responsive while running background tasks.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# On the other hand, multiprocessing is more effective for CPU-bound tasks, which demand substantial computational power and benefit from parallel execution. This includes:\n",
    "\n",
    "# Data Processing: Complex calculations on large datasets, like those found in data analysis or machine learning, are ideal for multiprocessing.\n",
    "\n",
    "# Image Processing: Large images or video files can be manipulated more efficiently when each frame or segment is processed independently.\n",
    "\n",
    "# Scientific Simulations: Simulations requiring intense mathematical computations run more effectively with multiprocessing.\n",
    "\n",
    "# Parallel Algorithms: Algorithms that can be divided into independent tasks, such as sorting or searching large datasets, are well-suited for multiprocessing.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Key Differences\n",
    "\n",
    "# Concurrency vs. Parallelism:>>> Multithreading achieves concurrency, meaning tasks appear to run simultaneously, but due to Python’s Global Interpreter Lock\n",
    "# (GIL), it doesn’t achieve true parallelism. In contrast, multiprocessing does achieve true parallelism by utilizing multiple processors.\n",
    "\n",
    "# Resource Sharing:>>> Threads share the same memory space, making communication easier but also introducing risks like race conditions.\n",
    "# Processes, however, have separate memory spaces, which prevents these issues but complicates inter-process communication.\n",
    "\n",
    "\n",
    "# Overhead:>>>> Threads are generally less resource-intensive to create and manage compared to processes. However, processes can\n",
    "# leverage multiple CPU cores, offering better performance for CPU-bound tasks.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "622c53c3-dd93-49e9-a593-0eb2c765631f",
   "metadata": {},
   "source": [
    "# QUESTION 2:Describe what a process pool is and how it helps in managing multiple processes efficiently?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "bcb5dfa3-e844-4280-b60e-a1c2b3280f63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # A process pool is a programming construct used to manage a collection of worker processes that can be employed\n",
    "# to perform tasks concurrently. This concept is particularly useful in scenarios where tasks are CPU-bound or require\n",
    "# parallel processing. Here's a breakdown of what a process pool is and how it helps in managing multiple processes \n",
    "# efficiently:\n",
    "\n",
    "# # What is a Process Pool?\n",
    "# # Definition: A process pool is a set of pre-allocated worker processes that are used to handle tasks. Instead of \n",
    "# creating and destroying processes dynamically for each task, a pool of processes is created in advance and reused \n",
    "# as needed.\n",
    "\n",
    "# # Pre-allocation: The pool has a fixed number of processes that are created and initialized once at the start. This\n",
    "# avoids the overhead associated with process creation and destruction for every individual task.\n",
    "\n",
    "# # Task Queue: Tasks are added to a queue, and the processes in the pool pick tasks from this queue. The processes \n",
    "# continue to work on tasks from the queue until all tasks are completed.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# # How Does a Process Pool Help in Managing Multiple Processes Efficiently?\n",
    "# # Resource Management: By limiting the number of processes in the pool, you avoid overwhelming the system with too\n",
    "# many concurrent processes. This is particularly important for managing system resources like memory and CPU usage.\n",
    "\n",
    "# # Reduced Overhead: Creating and destroying processes can be resource-intensive and time-consuming. A process pool\n",
    "# mitigates this overhead by reusing existing processes, which can be more efficient in terms of both time and system \n",
    "# resources.\n",
    "\n",
    "# # Concurrency Control: The pool can control the level of concurrency. For instance, if you have a pool of 10 processes,\n",
    "# you ensure that at most 10 tasks are processed simultaneously, which can be tuned based on the system's capabilities\n",
    "# and the nature of the tasks.\n",
    "\n",
    "# # Task Scheduling: The pool manages the scheduling of tasks, often in a FIFO (First In, First Out) manner or based \n",
    "# on other scheduling algorithms. This makes it easier to handle task distribution and load balancing.\n",
    "\n",
    "# # Error Handling: Many process pool implementations include mechanisms for handling errors and exceptions. If a\n",
    "# process encounters an error, it can be managed and potentially replaced by another process without affecting the\n",
    "# overall task processing.\n",
    "\n",
    "# # Scalability: Process pools can be scaled up or down based on the workload. This flexibility helps in efficiently\n",
    "# managing system resources while handling varying loads."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "9e8b0bfa-f836-47b9-9064-2057cd16b6b2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1, 4, 9, 16, 25]\n"
     ]
    }
   ],
   "source": [
    "from multiprocessing import Pool\n",
    "\n",
    "def worker(task):\n",
    "    # Process the task\n",
    "    return task * task\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    tasks = [1, 2, 3, 4, 5]\n",
    "    with Pool(4) as pool:  # Create a pool with 4 worker processes\n",
    "        results = pool.map(worker, tasks)  # Distribute tasks to the pool\n",
    "    print(results)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "172cb82f-1e8b-4b80-b14a-a748acdcc8dc",
   "metadata": {},
   "source": [
    "# QUSTION:-3Explain what multiprocessing is and why it is used in Python programs.?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "19353353-a3fa-485d-a7fd-e6b9abfbf5be",
   "metadata": {},
   "outputs": [],
   "source": [
    "# What is Multiprocessing?\n",
    "# Multiprocessing refers to the ability of a system to run multiple processes simultaneously.\n",
    "# Each process has its own memory space and can run independently of others. \n",
    "# This is distinct from multithreading, where threads share the same memory space and can lead to issues like \n",
    "# race conditions and thread contention.\n",
    "\n",
    "\n",
    "\n",
    "# Key Concepts of Multiprocessing:\n",
    "# Process: A process is an instance of a running program.\n",
    "# It has its own memory space and resources, making it isolated from other processes.\n",
    "\n",
    "# Concurrency: Multiprocessing allows different processes to run at the same time, \n",
    "# potentially improving performance by utilizing multiple CPU cores.\n",
    "\n",
    "# Inter-process Communication (IPC): Since processes have separate memory spaces,\n",
    "# they need mechanisms to communicate and share data. Common IPC methods include pipes, queues, and shared memory.\n",
    "\n",
    "\n",
    "\n",
    "# Why is Multiprocessing Used in Python Programs?\n",
    "# Bypassing the Global Interpreter Lock (GIL): Python's standard implementation (CPython)\n",
    "# has a Global Interpreter Lock (GIL) that prevents multiple native threads from executing \n",
    "# Python bytecodes simultaneously. This can be a bottleneck for CPU-bound tasks. Multiprocessing\n",
    "# circumvents this limitation because each process runs in its own Python interpreter and memory \n",
    "# space, thus not affected by the GIL.\n",
    "\n",
    "# Parallelism: For tasks that are CPU-bound (e.g., data processing, mathematical computations),\n",
    "# multiprocessing allows Python programs to take advantage of multiple CPU cores, thus speeding up\n",
    "# execution by performing tasks in parallel.\n",
    "\n",
    "# Isolation: Processes in a multiprocessing environment are isolated from each other,\n",
    "# reducing issues related to shared state and making the program more robust to crashes or\n",
    "# errors in individual processes.\n",
    "\n",
    "# Scalability: Multiprocessing can help programs scale better by distributing workloads across\n",
    "# multiple processors or machines, which can be particularly beneficial for high-performance computing tasks.\n",
    "\n",
    "# Asynchronous Execution: By running multiple processes, Python programs can handle multiple tasks \n",
    "# at once, improving responsiveness and performance in applications that require concurrent execution."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a91a4ffd-a0e8-4083-a682-f8368c368bfc",
   "metadata": {},
   "source": [
    "# QUESTION:-4 Write a Python program using multithreading where one thread adds numbers to a list, and another thread removes numbers from the list. Implement a mechanism to avoid race conditions using threading.Lock"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "b052ea3d-5d21-4978-92b1-ed28abbad2ce",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Added 0, List: [0]\n",
      "Removed 0, List: []\n",
      "Added 1, List: [1]\n",
      "Added 2, List: [1, 2]\n",
      "Removed 1, List: [2]\n",
      "Added 3, List: [2, 3]\n",
      "Removed 2, List: [3]\n",
      "Added 4, List: [3, 4]\n",
      "Added 5, List: [3, 4, 5]\n",
      "Removed 3, List: [4, 5]\n",
      "Added 6, List: [4, 5, 6]\n",
      "Removed 4, List: [5, 6]\n",
      "Added 7, List: [5, 6, 7]\n",
      "Added 8, List: [5, 6, 7, 8]\n",
      "Removed 5, List: [6, 7, 8]\n",
      "Added 9, List: [6, 7, 8, 9]\n",
      "Removed 6, List: [7, 8, 9]\n",
      "Removed 7, List: [8, 9]\n",
      "Removed 8, List: [9]\n",
      "Removed 9, List: []\n",
      "Final List: []\n"
     ]
    }
   ],
   "source": [
    "import threading\n",
    "import time\n",
    "\n",
    "# Shared list\n",
    "numbers = []\n",
    "\n",
    "# Lock to prevent race conditions\n",
    "lock = threading.Lock()\n",
    "\n",
    "def add_numbers():\n",
    "    for i in range(10):\n",
    "        time.sleep(0.1)  # Simulate some work\n",
    "        with lock:\n",
    "            numbers.append(i)\n",
    "            print(f\"Added {i}, List: {numbers}\")\n",
    "\n",
    "def remove_numbers():\n",
    "    for i in range(10):\n",
    "        time.sleep(0.15)  # Simulate some work\n",
    "        with lock:\n",
    "            if numbers:\n",
    "                removed = numbers.pop(0)\n",
    "                print(f\"Removed {removed}, List: {numbers}\")\n",
    "\n",
    "# Create threads\n",
    "thread1 = threading.Thread(target=add_numbers)\n",
    "thread2 = threading.Thread(target=remove_numbers)\n",
    "\n",
    "# Start threads\n",
    "thread1.start()\n",
    "thread2.start()\n",
    "\n",
    "# Wait for threads to complete\n",
    "thread1.join()\n",
    "thread2.join()\n",
    "\n",
    "print(\"Final List:\", numbers)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "60f9645d-9363-49bb-a548-d323e1f2c899",
   "metadata": {},
   "source": [
    "# QUESTION:- 5 Describe the methods and tools available in Python for safely sharing data between threads and processes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "504b77c9-2518-42de-8500-43a364fed10f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# # In Python, safely sharing data between threads and processes is crucial to avoid issues \n",
    "# like race conditions and ensure data integrity. Here are some methods and tools available for this purpose:\n",
    "\n",
    "# # Sharing Data Between Threads\n",
    "# # Threading Locks (threading.Lock):\n",
    "# # Purpose: Prevents multiple threads from accessing shared data simultaneously.\n",
    "# # Usage: Wrap the critical section of code with lock.acquire() and lock.release()."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "1731e756-2276-4995-b36c-b21c5ac3da96",
   "metadata": {},
   "outputs": [],
   "source": [
    "import threading\n",
    "\n",
    "lock = threading.Lock()\n",
    "shared_data = 0\n",
    "\n",
    "def thread_task():\n",
    "    global shared_data\n",
    "    with lock:\n",
    "        shared_data += 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "28b2f1a7-7fc4-483f-bf9f-df271f4c8a6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Threading Events (threading.Event):\n",
    "# Purpose: Allows threads to wait for an event to be set before proceeding.\n",
    "# Usage: Use event.set(), event.clear(), and event.wait()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "c5d488cc-d0c5-47fb-86e3-b45f0d8b0c26",
   "metadata": {},
   "outputs": [],
   "source": [
    "import threading\n",
    "\n",
    "event = threading.Event()\n",
    "\n",
    "def thread_task():\n",
    "    event.wait()  # Wait until the event is set\n",
    "    print(\"Event has been set!\")\n",
    "\n",
    "event.set()  # Set the event"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "eb59e699-7367-4fbd-9d5c-830b28a5d526",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Queues (queue.Queue):\n",
    "# Purpose: Provides a thread-safe way to exchange data between threads.\n",
    "# Usage: Use queue.put() to add data and queue.get() to retrieve data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "0fd5bffd-46fe-4970-843e-a907e3c84552",
   "metadata": {},
   "outputs": [],
   "source": [
    "import threading\n",
    "import queue\n",
    "\n",
    "q = queue.Queue()\n",
    "\n",
    "def producer():\n",
    "    q.put(\"data\")\n",
    "\n",
    "def consumer():\n",
    "    data = q.get()\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "c8f5eee0-3a8b-4e19-89de-38a9792f8fd5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Sharing Data Between Processes\n",
    "# Multiprocessing Queues (multiprocessing.Queue):\n",
    "# Purpose: Allows data to be safely shared between processes.\n",
    "# Usage: Similar to queue.Queue but for processes."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "5257d89e-a8e6-4c06-8274-caba16462447",
   "metadata": {},
   "outputs": [],
   "source": [
    "from multiprocessing import Process, Queue\n",
    "\n",
    "q = Queue()\n",
    "\n",
    "def producer():\n",
    "    q.put(\"data\")\n",
    "\n",
    "def consumer():\n",
    "    data = q.get()\n",
    "    print(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3ba89650-d262-4d82-bf61-1836a80f16e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Multiprocessing Pipes (multiprocessing.Pipe):\n",
    "# Purpose: Creates a two-way communication channel between processes.\n",
    "# Usage: Use pipe.send() to send data and pipe.recv() to receive data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d6082810-9f06-4b8a-ac09-8346ae314811",
   "metadata": {},
   "outputs": [],
   "source": [
    "from multiprocessing import Process, Pipe\n",
    "\n",
    "parent_conn, child_conn = Pipe()\n",
    "\n",
    "def producer():\n",
    "    child_conn.send(\"data\")\n",
    "\n",
    "def consumer():\n",
    "    data = parent_conn.recv()\n",
    "    print(data)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "0bcd51b9-c4cd-4cda-b7c2-88658638e380",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Shared Memory (multiprocessing.Value and multiprocessing.Array):\n",
    "# Purpose: Allows processes to share data in a shared memory space.\n",
    "# Usage: Use Value for single values and Array for arrays."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "e90cfb74-601e-41d6-9c38-efe2c5654590",
   "metadata": {},
   "outputs": [],
   "source": [
    "from multiprocessing import Process, Value, Array\n",
    "\n",
    "shared_value = Value('i', 0)  # 'i' indicates an integer\n",
    "shared_array = Array('i', [0, 0, 0])\n",
    "\n",
    "def modify_shared_data():\n",
    "    shared_value.value += 1\n",
    "    shared_array[0] += 1\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1bd11490-6850-476e-95d3-dea8dcb2fdda",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a56ecae5-0fb0-403d-b7b9-20aa6bfcf480",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c30e4a59-82cd-44d9-b48f-75b43428a9d2",
   "metadata": {},
   "source": [
    "# QUESTIO:-6. Discuss why it’s crucial to handle exceptions in concurrent programs and the techniques available for doing so."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "03005421-b25b-4bf6-b21a-68a33bf4e8ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Handling exceptions in concurrent programs is crucial for several reasons:\n",
    "\n",
    "# Maintaining Program Stability: Unhandled exceptions can cause threads to terminate unexpectedly, \n",
    "# leading to incomplete tasks and potentially leaving shared resources in an inconsistent state.\n",
    "\n",
    "# Resource Management: Proper exception handling ensures that resources such as memory, file handles, \n",
    "# and network connections are released appropriately, preventing resource leaks.\n",
    "\n",
    "# Data Integrity: Concurrent programs often involve shared data. Unhandled exceptions can lead to data \n",
    "# corruption if the program does not properly manage access to shared resources.\n",
    "\n",
    "# User Experience: For applications with user interfaces, unhandled exceptions can result in\n",
    "# poor user experiences, such as application crashes or unresponsive behavior.\n",
    "\n",
    "# Debugging and Maintenance: Properly handled exceptions provide useful information for debugging and\n",
    "# maintaining the code, making it easier to identify and fix issues.\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "# Techniques for Handling Exceptions in Concurrent Programs\n",
    "\n",
    "# Try-Catch Blocks: The most basic method is to use try-catch blocks around code that might throw exceptions.\n",
    "# This ensures that exceptions are caught and handled appropriately within each thread.\n",
    "\n",
    "# Thread-Specific Exception Handling: Different threads may require different exception handling strategies.\n",
    "# Using thread-specific handlers can ensure that each thread deals with exceptions in a way that is appropriate\n",
    "# for its context1.\n",
    "\n",
    "# Thread Pools: Using thread pools can help manage exceptions more efficiently. When a thread in the pool encounters\n",
    "# an exception, the pool can handle it and potentially restart the thread or log the error1.\n",
    "\n",
    "# Uncaught Exception Handlers: Many programming languages provide mechanisms to set a default handler for uncaught\n",
    "# exceptions in threads. For example, Java allows setting an UncaughtExceptionHandler for threads, which can log the\n",
    "# exception or take corrective action.\n",
    "\n",
    "# Future and CompletableFuture: In languages like Java, using Future or CompletableFuture allows handling exceptions \n",
    "# that occur in asynchronous tasks. These constructs provide methods to check for exceptions and handle them once the \n",
    "# task is complete2.\n",
    "\n",
    "# Atomic Operations and Locks: Ensuring that operations on shared resources are atomic and using locks can prevent data\n",
    "# corruption and ensure that exceptions do not leave shared resources in an inconsistent state3.\n",
    "\n",
    "# Exception Propagation: In some cases, it might be necessary to propagate exceptions from worker threads to the \n",
    "# main thread. This can be done using shared data structures or by re-throwing exceptions in the main thread after \n",
    "# worker threads have completed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e909bc7f-8dd2-48f5-af95-c6aab76bdf94",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9f25ee47-755e-4752-be37-cc12344451b4",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "c939e2b9-18a5-4806-be95-7d702fbf61a7",
   "metadata": {},
   "source": [
    "# QUESTION:-7. Create a program that uses a thread pool to calculate the factorial of numbers from 1 to 10 concurrently. Use concurrent.futures.ThreadPoolExecutor to manage the threads"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "79ae0ed1-a858-4ebb-b92a-618a59d6d720",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Factorial of 5 is 120\n",
      "Factorial of 7 is 5040\n",
      "Factorial of 3 is 6\n",
      "Factorial of 8 is 40320\n",
      "Factorial of 2 is 2\n",
      "Factorial of 6 is 720\n",
      "Factorial of 1 is 1\n",
      "Factorial of 10 is 3628800\n",
      "Factorial of 4 is 24\n",
      "Factorial of 9 is 362880\n"
     ]
    }
   ],
   "source": [
    "import concurrent.futures\n",
    "\n",
    "def factorial(n):\n",
    "    if n == 0:\n",
    "        return 1\n",
    "    else:\n",
    "        result = 1\n",
    "        for i in range(1, n + 1):\n",
    "            result *= i\n",
    "        return result\n",
    "\n",
    "def main():\n",
    "    numbers = range(1, 11)\n",
    "    with concurrent.futures.ThreadPoolExecutor() as executor:\n",
    "        futures = {executor.submit(factorial, num): num for num in numbers}\n",
    "        for future in concurrent.futures.as_completed(futures):\n",
    "            num = futures[future]\n",
    "            try:\n",
    "                result = future.result()\n",
    "                print(f\"Factorial of {num} is {result}\")\n",
    "            except Exception as exc:\n",
    "                print(f\"Generated an exception: {exc}\")\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f90b6753-a39f-4263-992a-32fe0675e2fb",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b189dda5-8dee-430e-9827-afa2052c4e22",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "f8aca369-3c5d-4e4c-98a9-b28c68a31190",
   "metadata": {},
   "source": [
    "# QUESTION:-Create a Python program that uses multiprocessing.Pool to compute the square of numbers from 1 to 10 in parallel. Measure the time taken to perform this computation using a pool of different sizes (e.g., 2, 4, 8 processes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "9927eeb9-30a2-4a2d-8066-b0a9243023ab",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pool size: 2\n",
      "Results: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n",
      "Time taken: 0.001369 seconds\n",
      "\n",
      "Pool size: 4\n",
      "Results: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n",
      "Time taken: 0.002087 seconds\n",
      "\n",
      "Pool size: 8\n",
      "Results: [1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\n",
      "Time taken: 0.001878 seconds\n",
      "\n"
     ]
    }
   ],
   "source": [
    "import multiprocessing\n",
    "import time\n",
    "\n",
    "def square(x):\n",
    "    return x * x\n",
    "\n",
    "def measure_time(pool_size):\n",
    "    numbers = list(range(1, 11))\n",
    "    with multiprocessing.Pool(processes=pool_size) as pool:\n",
    "        start_time = time.time()\n",
    "        results = pool.map(square, numbers)\n",
    "        end_time = time.time()\n",
    "        elapsed_time = end_time - start_time\n",
    "    return results, elapsed_time\n",
    "\n",
    "if __name__ == \"__main__\":\n",
    "    pool_sizes = [2, 4, 8]\n",
    "    for size in pool_sizes:\n",
    "        results, elapsed_time = measure_time(size)\n",
    "        print(f\"Pool size: {size}\")\n",
    "        print(f\"Results: {results}\")\n",
    "        print(f\"Time taken: {elapsed_time:.6f} seconds\\n\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fec98a2d-2f8d-4428-bd39-ffb3708caae4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
